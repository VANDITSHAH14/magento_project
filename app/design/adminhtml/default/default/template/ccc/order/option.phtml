<div>
    <ul class="messages">
        <li class="notice-msg">
            <ul>
                <li><?php echo $this->__('If you do not specify an option value for a specific store view then the default (Admin) value will be used.') ?></li>
            </ul>
        </li>
    </ul>
</div>

<br/>
<div class="entity-edit" id="matage-options-panel">
    <div class="entry-edit-head">
        <h4 class="icon-head head-edit-form fieldset-legend"><?php echo $this->__('Manage Options (values of your attribute)') ?></h4>
    </div>
    <div class="box">
        <div class="hor-scroll">
            <table class="dynamic-grid" cellspacing="0" cellpadding="0">
                <tr id="attribute-options-table">
                    <th><?php echo $this->__('From') ?></th>
                    <th><?php echo $this->__('To') ?></th>
                    <th class="nobr a-center"><?php echo $this->__('Is Default') ?></th>
                    <th>
                        <?php if (!$this->getReadOnly()): ?>
                                <?php echo $this->getAddNewButtonHtml() ?>
                        <?php endif; ?>
                    </th>
                </tr>
                <tr class="no-display template" id="row-template">
                    <td><input name="option[value][{{id}}]" value="" class="input-text required-option" type="text" <?php if ($this->getReadOnly()): ?> disabled="disabled"<?php endif; ?>/></td>
                    <td class="a-center"><input class="input-text" type="text" name="option[order][{{id}}]" value="{{sort_order}}" <?php if ($this->getReadOnly()): ?> disabled="disabled"<?php endif; ?>/></td>
                    <td><input class="input-radio" type="radio" name="default[]" value="{{id}}" <?php if ($this->getReadOnly()): ?> disabled="disabled"<?php endif; ?>/></td>
                    <td class="a-left">
                        <input type="hidden" class="delete-flag" name="option[delete][{{id}}]" value="" />
                        <?php if (!$this->getReadOnly()): ?>
                                <?php echo $this->getDeleteButtonHtml() ?>
                        <?php endif; ?>
                    </td>
                </tr>
            </table>
        </div>
        <input type="hidden" id="option-count-check" value="" />
    </div>
</div>
<?php
$optionData = $this->getOptionData();
?>
<script type="text/javascript">
    // <![CDATA[
    var optionData = <?php echo json_encode($optionData); ?>; // Assuming $optionData holds the array with old values

    var optionDefaultInputType = 'radio';

    var attributeOption = {
        table: $('attribute-options-table'),
        templateSyntax: /(^|.|\r|\n)({{(\w+)}})/,
        templateText:
            '<tr class="option-row">' +
            '<td><input name="option[value][{{id}}]" value="{{value}}" class="input-text required-option" type="text" <?php if ($this->getReadOnly()): ?> disabled="disabled"<?php endif; ?>/></td>' +
            '<td class="a-center"><input class="input-text" type="text" name="option[order][{{id}}]" value="{{order}}" <?php if ($this->getReadOnly()): ?> disabled="disabled"<?php endif; ?>/></td>' +
            '<td><input class="input-radio" type="{{intype}}" name="default[]" value="{{id}}" {{checked}} <?php if ($this->getReadOnly()): ?> disabled="disabled"<?php endif; ?>/></td>' +
            '<td class="a-left">' +
            '<input type="hidden" class="delete-flag" name="option[delete][{{id}}]" value="" />' +
            <?php if (!$this->getReadOnly()): ?>
                '<?php echo Mage::helper('core')->jsQuoteEscape($this->getDeleteButtonHtml()) ?>' +
            <?php endif; ?>
            '</td>' +
            '</tr>',
        itemCount: 0,
        totalItems: 0,
        isReadOnly: <?php echo (int) $this->getReadOnly(); ?>,
        add: function(data) {
            this.template = new Template(this.templateText, this.templateSyntax);
            var isNewOption = false;
            if (!data.id) {
                data = {};
                data.id = 'option_' + this.itemCount;
                isNewOption = true;
            }
            if (!data.intype)
                data.intype = optionDefaultInputType;
            Element.insert(this.table, { after: this.template.evaluate(data) });
            if (isNewOption && !this.isReadOnly) {
                this.enableNewOptionDeleteButton(data.id);
            }
            this.bindRemoveButtons();
            this.itemCount++;
            this.totalItems++;
            this.updateItemsCountField();
        },
        remove: function(event) {
            var element = $(Event.findElement(event, 'tr'));

            if (element) {
                var elementFlags = element.getElementsByClassName('delete-flag');
                if (elementFlags[0]) {
                    elementFlags[0].value = 1;
                }

                element.addClassName('no-display');
                element.addClassName('template');
                element.hide();
                this.totalItems--;
                this.updateItemsCountField();
            }
        },
        updateItemsCountField: function() {
            if (this.totalItems > 0) {
                $('option-count-check').value = '1';
            } else {
                $('option-count-check').value = '';
            }
        },
        enableNewOptionDeleteButton: function(id) {
            $$('#delete_button_container_' + id + ' button').each(function(button) {
                button.enable();
                button.removeClassName('disabled');
            });
        },
        bindRemoveButtons: function() {
            var buttons = $$('.delete-option');
            for (var i = 0; i < buttons.length; i++) {
                if (!$(buttons[i]).binded) {
                    $(buttons[i]).binded = true;
                    Event.observe(buttons[i], 'click', this.remove.bind(this));
                }
            }
        }
    }

    if ($('row-template')) {
        $('row-template').remove();
    }

    if (optionData && optionData.option.value && optionData.option.order) {
        Object.keys(optionData.option.value).forEach(function(id) {
            var data = {
                id: id,
                value: optionData.option.value[id],
                order: optionData.option.order[id],
                intype: optionDefaultInputType
            };
            attributeOption.add(data);
        });
    }

    attributeOption.bindRemoveButtons();

    if ($('add_new_option_button')) {
        Event.observe('add_new_option_button', 'click', attributeOption.add.bind(attributeOption));
    }

    Validation.addAllThese([
        ['required-option', '<?php echo $this->jsQuoteEscape($this->__('Failed')) ?>', function(v) {
            return !Validation.get('IsEmpty').test(v);
        }]
    ]);
    Validation.addAllThese([
        ['required-options-count', '<?php echo $this->jsQuoteEscape($this->__('Options is required')) ?>', function(v) {
            return !Validation.get('IsEmpty').test(v);
        }]
    ]);
    // ]]>
</script>
